pipeline{
    agent any
    parameters {
        choice(name: 'BRANCH', choices: ['master','dev', 'test','prod'])
        choice(name: 'ACTION', choices: ['build', 'destroy'])
    }
    stages{
        stage('SCM'){
            steps{
                // git credentialsId: 'xgen_github', url: 'https://github.com/xgenOsama/BackHouseM.git'
               // git credentialsId: 'xgen_github', branch: "master", url: 'https://github.com/xgenOsama/BackHouseM.git'
                //sh "git checkout ${params.BRANCH}"
                //checkout scm
                checkout([$class: 'GitSCM', branches: [[name: "*/${params.BRANCH}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/xgenOsama/BackHouseM']]])

            }
        }
        stage('check code quality'){
            def scannerHome = tool 'sonarQubeSacnner4';
            withSonarQubeEnv('sonar-9') { 
                sh "${scannerHome}/bin/sonar-scanner"
            }   
        }
        stage('docker build'){

            steps{
                script {
                    if (params.BRANCH == 'master') {
                        sh "docker build . -t xgenosama/backhouse"
                    }
                }
            }
        }
        stage('dockerhub push'){
            steps{
                script {
                    if (params.BRANCH == 'master') {
                        withCredentials([string(credentialsId: 'my_docker_hub_password', variable: 'DockerHubPwd')]) {
                            sh "docker login -u xgenosama -p ${DockerHubPwd}"
                        }
                        sh "docker push  xgenosama/backhouse"
                    }
                }
            }
        }
        stage('dockerhub pull image'){
            steps{
                script {
                    if (params.BRANCH == 'dev' || params.BRANCH == "test" || params.BRANCH == "prod") {
                        withCredentials([string(credentialsId: 'my_docker_hub_password', variable: 'DockerHubPwd')]) {
                            sh "docker login -u xgenosama -p ${DockerHubPwd}"
                        }
                        sh "docker pull  xgenosama/backhouse"
                    }       
                }     
            }
        }
        stage('apply deployment to minikube'){
            steps{
                // git credentialsId: 'xgen_github', branch: "${params.BRANCH}", url: 'https://github.com/xgenOsama/BackHouseM.git'
                script {
                    if (params.BRANCH == 'dev' || params.BRANCH == "test" || params.BRANCH == "prod") {
                            if(params.ACTION == 'build'){
                                sh "kubectl apply -f namespace.yaml"
                                sh "kubectl apply -f deployment.yaml"
                                sh "kubectl apply -f service.yaml"
                            }else if(params.ACTION == 'destroy'){
                                sh "kubectl delete -f namespace.yaml"
                                sh "kubectl delete -f deployment.yaml"
                                sh "kubectl delete -f service.yaml"
                            }

                    }
                }
            }
        }
    }
}
    
